/*
  Created by: Fei Song
  Modified by: Justin Palmer
  File Name: tiny.cup
*/
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal String ID, NUM;
terminal BOOL, INT, VOID;
terminal OR, AND, APPROX; 
terminal LT, LTEQ, GT, GTEQ, NEQ, EQ;
terminal String TRUTH;
terminal TIMES, OVER, PLUS, MINUS, ASSIGN;
terminal LPAREN, RPAREN, LBRACK, RBRACK, COMMA, LCURLBRACK, RCURLBRACK, SEMI;
terminal RETURN, IF, ELSE, WHILE;
terminal ERROR;

non terminal DecList program, declaration_list;
non terminal VarDecList param_list, local_decL, params;
non terminal ExpList stmt_list, arg_list, args;

non terminal Exp varExp, exp, exp_stmt, simple_exp, selec_stmt, iter_stmt, return_stmt, stmt, compound_stmt;  
non terminal Dec declaration, fun_prototype;
non terminal VarDec var_declaration, param;
non terminal Var var;
non terminal NameTy type_spec;
non terminal FunctionDec fun_declaration;


precedence left OVER,TIMES, PLUS, MINUS;
precedence nonassoc AND, OR, EQ, NEQ, LT, LTEQ, GT, GTEQ;


/* ----------------------------Grammar Section-------------------- */
program	             ::= declaration_list:s
                        {: RESULT=s; :}
                        ;

declaration_list	    ::= declaration_list:dl declaration:d 
                        {: DecList tempList = dl;
                           while(tempList.tail!=null)
                              tempList=tempList.tail;
                           tempList.tail = new DecList(d,null);
                           RESULT = dl;
                        :}
                        | declaration:d
                        {: RESULT = new DecList(d,null);:}
                        ;
                  
declaration	          ::= var_declaration:vd
                        {: RESULT = vd; :}
                        | fun_declaration:fd
                        {: RESULT = fd;:}
                        ;

var_declaration	    ::= type_spec:ts ID:id SEMI
                        {: RESULT = new SimpleDec( tsleft, tsright, ts, id); :}                        
                        | type_spec:ts ID:id LBRACK NUM:n RBRACK SEMI
                        {: RESULT = new ArrayDec(tsleft,tsright,ts,id,Integer.parseInt(n)); :}
                        | type_spec:ts ID:id LBRACK NUM:n error:e SEMI
                        {: parser.report_error("Array not declared properly. Missing right bracket after size", e);
                           RESULT = new SimpleDec(tsleft, tsright, ts, null);
                        :}
                        | type_spec:ts ID:id error:e NUM:n RBRACK SEMI
                        {: parser.report_error("Array not declared properly. Missing left bracket before size", e);
                           RESULT = new SimpleDec(tsleft, tsright, ts, null);
                        :}
                        | type_spec:ts error:e SEMI
                        {: parser.report_error("Variable not declared properly. invalid variable name", e);
                           RESULT = new SimpleDec(tsleft, tsright, ts, null);
                        :}
                        | type_spec:ts ID:id error:e SEMI
                        {: parser.report_error("Variable not declared properly. argument after variable name is unexpected", e);
                           RESULT = new SimpleDec(tsleft, tsright, ts, null);
                        :}
                        | error:e SEMI
                        {: parser.report_error("Variable not named properly. The variable name was invlaid",e);
                           RESULT = new SimpleDec(eleft, 0, new NameTy(eleft,0,NameTy.NULL), null);
                        :}
                        ;

type_spec             ::= BOOL:b 
                        {: RESULT = new NameTy(bleft,bright,NameTy.BOOL);:}
                        | INT:i
                        {: RESULT = new NameTy(ileft,iright,NameTy.INT);:}
                        | VOID:vo 
                        {: RESULT = new NameTy(voleft,voright,NameTy.VOID);:}
                        ;

fun_declaration       ::= type_spec:ts ID:id LPAREN params:ps RPAREN compound_stmt:ct 
                        {: RESULT = new FunctionDec(tsleft,tsright,ts,id,ps,ct); :}
                        ;

fun_prototype         ::= type_spec:ts ID:id LPAREN params:ps RPAREN SEMI
                        {: RESULT = new FunctionDec(tsleft,tsright,ts,id,ps,new NilExp(tsleft,tsright)); :}
                        ;

params                ::= param_list:pl 
                        {: RESULT = pl; :}
                        | VOID:v 
                        ;
                      
param_list            ::= param_list:pl COMMA param:p
                        {: VarDecList tempList = pl;
                           while(tempList.tail!=null)
                              tempList = tempList.tail;
                           tempList.tail = new VarDecList(p,null);
                           RESULT = pl;
                        :}
                        | param:p
                        {: RESULT = new VarDecList(p,null); :}
                        ;
                      
param                 ::= type_spec:ts ID:id
                        {: RESULT = new SimpleDec(tsleft,tsright,ts,id);:}
                        | type_spec:ts ID:id LBRACK RBRACK
                        {: RESULT = new ArrayDec(tsleft,tsright,ts,id,0); :}
                        ;

compound_stmt         ::= LCURLBRACK local_decL:ld stmt_list:sl RCURLBRACK
                        {: RESULT = new CompoundExp(ldleft,ldright, ld,sl); :}
                        ;
                      
local_decL            ::= local_decL:ld var_declaration:v
                        {: VarDecList tempListLocal = ld;

                           if(tempListLocal == null){
                              ld = new VarDecList(v, null);
                              RESULT = ld;
                           }
                           else{
   
                              while(tempListLocal.tail!=null){
                                 tempListLocal = tempListLocal.tail;
                              }
                              tempListLocal.tail = new VarDecList(v,null);
                              RESULT = ld;
                           } :}
                        | 
                        {: RESULT = null; :}
                        ;

stmt_list             ::= stmt_list:sl stmt:s 
                         {: 
                           ExpList tempList = sl;
                           if(tempList==null){
                              sl = new ExpList(s,null);
                              RESULT = sl;
                           }
                           else{
                              while(tempList.tail!=null){
                                 tempList = tempList.tail;
                              }
                           
                              tempList.tail = new ExpList(s,null);
                              RESULT = sl;
                           } :}
                        |
                        {: RESULT=null; :}
                        ;

stmt                  ::= exp_stmt:es
                        {: RESULT = es; :}
                        | compound_stmt:cs
                        {: RESULT = cs; :} 
                        | selec_stmt:ss
                        {: RESULT = ss; :} 
                        | iter_stmt:is
                        {: RESULT= is; :} 
                        | return_stmt:rs
                        {: RESULT = rs; :}
                        ;

exp_stmt              ::= exp:e SEMI
                        {: RESULT = e; :}
                        | SEMI:s
                        {: RESULT = new NilExp(sleft,sright);:}
                        ;

selec_stmt            ::= IF:i LPAREN exp:e RPAREN stmt:s 
                        {: RESULT = new IfExp(ileft,iright,e,s,new NilExp(ileft,iright)); :}
                        | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2 
                        {: RESULT = new IfExp(ileft,iright,e,s1,s2); :}
                        ;

iter_stmt             ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                        {: RESULT = new WhileExp(wleft,wright,e,s); :}
                        ;

return_stmt           ::= RETURN:r exp:e SEMI
                        {: RESULT = new ReturnExp(rleft,rright,e) ;:}
                        | RETURN:r SEMI
                        {: RESULT = new ReturnExp(rleft,rright,new NilExp(rleft,rright)); ;:}
                        ;

exp                   ::= var:v ASSIGN:a exp:e
                        {: RESULT = new AssignExp(vleft,vright, new VarExp(vleft,vright,v), e); :}
                        | exp:e1 PLUS exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.PLUS,e2); :}
                        | exp:e1 MINUS exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.MINUS,e2); :}
                        | exp:e1 TIMES exp:e2 
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.TIMES,e2); :}
                        | exp:e1 OVER exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.OVER,e2); :} 
                        | exp:e1 LT exp:e2 
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.LT,e2); :}
                        | exp:e1 GT exp:e2 
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.GT,e2); :}
                        | exp:e1 GTEQ exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.GTEQ,e2); :} 
                        | exp:e1 LTEQ exp:e2 
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.LTEQ,e2); :}
                        | exp:e1 EQ exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.EQ,e2); :} 
                        | exp:e1 OR exp:e2 
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.OR,e2); :}
                        | exp:e1 AND exp:e2
                        {: RESULT= new OpExp(e1left,e1right,e1,OpExp.AND,e2); :}
                        | LPAREN:lp exp:e RPAREN:rp
                        {: RESULT = e; :}
                        |ID:i LPAREN args:a RPAREN
                        {: RESULT = new CallExp(ileft,iright,i,a); :}
                        | var:v
                        {: RESULT = new VarExp(vleft,vright,v); :}
                        | NUM:n
                        {: RESULT = new IntExp(nleft,nright,Integer.parseInt(n)); :}
                        | TRUTH:t
                        {: RESULT = new BoolExp(tleft,tright,Boolean.parseBoolean(t)); :}
                        ;

var                   ::= ID:i 
                        {: RESULT = new SimpleVar(ileft,iright,i); :}
                        | ID:i LBRACK exp:e RBRACK
                        {: RESULT = new IndexVar(ileft,iright,i,e); :}
                        ;


args                  ::= arg_list:al
                        {: RESULT = al; :}
                        |
                        ;

arg_list              ::= arg_list:al COMMA exp:e
                        {: ExpList tempList = al;
                           while(tempList.tail!=null)
                              tempList = tempList.tail;
                           tempList.tail = new ExpList(e,null);
                           RESULT = al;
                        :}
                        | exp:e
                        {: RESULT = new ExpList(e,null); :}
                        ;