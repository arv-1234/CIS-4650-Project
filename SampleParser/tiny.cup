/*
  Created by: Fei Song
  Modified by: Justin Palmer
  File Name: tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal String ID, NUM;
terminal BOOL, INT, VOID;
terminal OR,AND, APPROX; 
terminal LT, LTEQ, GT, GTEQ, NEQ, EQ;
terminal TRUTH;
terminal TIMES, OVER, PLUS, MINUS, ASSIGN;
terminal LPAREN,RPAREN,LBRACK,RBRACK, COMMA, LCURLBRACK, RCURLBRACK, SEMI;
terminal RETURN, IF, ELSE, WHILE;


non terminal DecList program, declaration_list;
non terminal VarDecL param_list, local_decL;
non terminal ExpList stmt_list, arg_list, args;

non terminal Var var;
non terminal Exp varExp,  
non terminal Dec declaration, fun_declaration;
non terminal VarDec var_declaration, param;





non terminal   var_declaration, fun_prototype, type_spec;
non terminal params, param, compound_stmt, selec_stmt, iter_stmt, return_stmt, stmt_list;
non terminal stmt, exp, exp_stmt, var, obool_exp, abool_exp, ubool_exp, simple_exp, relop, add_exp, addop;
non terminal term, mulop, sign_fac, factor, call, args, arg_list ;


/* ----------------------------Grammar Section-------------------- */
   
program	             ::= declaration_list:s
                        {: RESULT=s; :}
                        ;

declaration_list	    ::= declaration_list:dl declaration:d 
                        {: DecList tempList = dl;
                           while(t.tail!=null)
                              t=t.tail;
                           t.tail = new DecList(d,null);
                           Result = dl;
                        :}
                        | declaration:d
                        {: Result = new DecList(d,null);:}
                        ;
                  
declaration	          ::= var_declaration:vd
                        {: Result = vd; :}
                        | fun_declaration:fd
                        {: Result = fd;:}
                        ;

var_declaration	    ::= type_spec:ts ID:id SEMI
                        {: Result = new SingleDec( tsleft, tsright, ts, id) :}                        
                        | type_spec:ts ID:id LBRACK NUM:n RBRACK SEMI
                        {: Result = new DecArr(tsleft,tsright,ts,id,n); :}
                        ;

type_spec             ::= BOOL:b 
                        {: Result = b;:}
                        | INT
                        | VOID 
                        ;

fun_declaration       ::= type_spec ID LPAREN params RPAREN compound_stmt
                        ;

fun_prototype         ::= type_spec ID LPAREN params RPAREN SEMI
                        ;

params                ::= param_list
                        | VOID 
                        ;
                      
param_list            ::= param_list COMMA param
                        | param 
                        ;
                      
param                 ::= type_spec ID 
                        | type_spec ID LBRACK RBRACK
                        ;

compound_stmt         ::= LCURLBRACK local_decL stmt_list RCURLBRACK
                        ;
                      
local_decL            ::= local_decL var_declaration
                        |
                        ;

stmt_list             ::= stmt_list stmt 
                        |
                        ;

stmt                  ::= exp_stmt
                        | compound_stmt 
                        | selec_stmt 
                        | iter_stmt 
                        | return_stmt
                        ;

exp_stmt              ::= exp SEMI
                        | SEMI
                        ;

selec_stmt            ::= IF LPAREN exp RPAREN stmt 
                        | IF LPAREN exp RPAREN stmt ELSE stmt 
                        ;

iter_stmt             ::= WHILE LPAREN exp RPAREN stmt
                        ;

return_stmt           ::= RETURN exp SEMI
                        | RETURN SEMI
                        ;

exp                   ::= var ASSIGN exp 
                        | exp PLUS exp
                        | exp MINUS exp
                        | exp TIMES exp 
                        | exp OVER exp 
                        | exp LT exp 
                        | exp GT exp 
                        | exp GTE exp 
                        | exp LTE exp 
                        | exp EQ exp 
                        | APPROX exp
                        | exp OR exp 
                        | exp AND exp
                        | APPROX exp 
                        | LPAREN exp RPAREN
                        | var
                        | NUM
                        | TRUTH
                        ;

var                   ::= ID 
                        | ID LBRACK exp RBRACK
                        ;


call                  ::= ID LPAREN args RPAREN
                        ;

args                  ::= arg_list
                        |
                        ;

arg_list              ::= arg_list COMMA exp
                        | exp
                        ;